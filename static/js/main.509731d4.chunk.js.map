{"version":3,"sources":["components/SecretField/index.module.css","components/Footer/index.module.css","components/Banner/index.module.css","components/SecretField/index.js","components/TwoFactorTokenGenerator/index.js","components/Footer/index.js","components/Banner/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js","components/TwoFactorTokenGenerator/index.module.css"],"names":["module","exports","SecretInput","props","React","showPassword","values","setValues","FormControl","className","styles","variant","InputLabel","htmlFor","Input","id","type","value","secret","onChange","endAdornment","InputAdornment","position","IconButton","onClick","edge","label","TwoFactorTokenGenerator","useState","localStorage","getItem","setSecret","totpCode","authenticator","generate","code","setCode","copyButtonText","setCopyButtonText","refreshButtonText","setRefreshButtonText","progress","setProgress","updateProgress","percentage","Math","round","Date","now","setTimeout","generateCode","newTotpCode","useEffect","window","addEventListener","setInterval","CardContent","twoFactorContainer","event","newSecret","target","setItem","result","token","CircularProgress","size","Button","color","str","element","document","createElement","body","appendChild","select","execCommand","removeChild","copyToClipboard","refreshButton","Footer","footer","Typography","Link","href","fontSize","Banner","AppBar","appBar","Toolbar","Main","theme","createTheme","palette","primary","main","secondary","ThemeProvider","Card","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.509731d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SecretInput\":\"SecretField_SecretInput__3H7_n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__381x8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appBar\":\"Banner_appBar__2bIiy\"};","import * as React from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport styles from \"./index.module.css\";\n\nexport default function SecretInput(props) {\n  const [values, setValues] = React.useState({\n    showPassword: false,\n  });\n\n  const handleClickShowPassword = () => {\n    setValues({\n      ...values,\n      showPassword: !values.showPassword,\n    });\n  };\n\n  return (\n    <FormControl className={styles.SecretInput} variant=\"outlined\">\n      <InputLabel htmlFor=\"outlined-adornment-password\">OTP Secret</InputLabel>\n      <Input\n        id=\"outlined-adornment-password\"\n        type={values.showPassword ? \"text\" : \"password\"}\n        value={props.secret}\n        onChange={props.onChange}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton\n              aria-label=\"toggle password visibility\"\n              onClick={handleClickShowPassword}\n              edge=\"end\"\n            >\n              {values.showPassword ? <Visibility /> : <VisibilityOff />}\n            </IconButton>\n          </InputAdornment>\n        }\n        label=\"Password\"\n      />\n    </FormControl>\n  );\n}\n","import { authenticator } from \"otplib\";\nimport React, { useState, useEffect } from \"react\";\nimport HourglassFullIcon from \"@material-ui/icons/HourglassFull\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport styles from \"./index.module.css\";\nimport SecretField from \"../SecretField\";\n\nexport default function TwoFactorTokenGenerator() {\n  const [secret, setSecret] = useState(\n    localStorage.getItem(\"TwoFactorTokenSecret\") || \"\"\n  );\n  const totpCode = secret ? authenticator.generate(secret) : \"\";\n  const [code, setCode] = useState(totpCode);\n  const [copyButtonText, setCopyButtonText] = useState(\"Copy\");\n  const [refreshButtonText, setRefreshButtonText] = useState(\"Refresh\");\n  const [progress, setProgress] = useState(100);\n\n  const updateSecret = (event) => {\n    const newSecret = event.target.value;\n    setSecret(newSecret);\n    localStorage.setItem(\"TwoFactorTokenSecret\", newSecret);\n  };\n\n  const copyToClipboard = (str) => {\n    if (str === \"\") {\n      return;\n    }\n    const element = document.createElement(\"textarea\");\n    element.value = str;\n    document.body.appendChild(element);\n    element.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(element);\n\n    setCopyButtonText(\"Copied\");\n    setTimeout(() => setCopyButtonText(\"Copy\"), 1500);\n  };\n\n  const updateProgress = () => {\n    const secondElapsed = Math.round(Date.now() / 1000) % 30;\n    const secondsRemain = 30 - secondElapsed;\n    const percentage = (secondsRemain * 100) / 30;\n    setProgress(percentage);\n\n    if (percentage < 10) {\n      setTimeout(generateCode, 2500);\n    }\n  };\n\n  const generateCode = () => {\n    if (!!!secret) {\n      setCode(\"\");\n      return;\n    }\n\n    setRefreshButtonText(<HourglassFullIcon />);\n    const newTotpCode = secret ? authenticator.generate(secret) : \"\";\n    if (newTotpCode !== code) {\n      setCode(newTotpCode);\n    }\n    setTimeout(() => setRefreshButtonText(\"Refresh\"), 100);\n  };\n\n  useEffect(generateCode, [secret, code]);\n\n  window.addEventListener(\"focus\", generateCode);\n  window.addEventListener(\"load\", () => {\n    updateProgress();\n    setInterval(updateProgress, 2000);\n  });\n\n  return (\n    <CardContent>\n      <div className={styles.twoFactorContainer}>\n        <SecretField secret={secret} onChange={updateSecret} />\n        <div className={styles.result}>\n          <div className={styles.token}>\n            Code: {code} &nbsp;\n            {code ?  <CircularProgress\n              variant=\"determinate\"\n              value={progress}\n              size={20}\n            /> : null}\n          </div>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => copyToClipboard(code)}\n            className={styles.refreshButton}\n          >\n            {copyButtonText}\n          </Button>{\" \"}\n          &nbsp;\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={generateCode}\n            className={styles.refreshButton}\n          >\n            {refreshButtonText}\n          </Button>\n        </div>\n      </div>\n    </CardContent>\n  );\n}\n","import * as React from \"react\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\nimport styles from \"./index.module.css\";\n\nexport default function Footer() {\n  return (\n    <div className={styles.footer}>\n      <Typography variant=\"body1\">\n        <Link href=\"https://github.com/hex0cter/2fa-otp\">\n          <GitHubIcon fontSize=\"small\" />\n        </Link>\n      </Typography>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styles from \"./index.module.css\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n\nexport default function Banner() {\n  return (\n    <AppBar position=\"static\" color=\"secondary\" className={styles.appBar}>\n      <Toolbar>\n        <Typography variant=\"subtitle2\">\n          Fill in your OTP secret to get the latest 2FA code. <br />\n          Your secret is only cached locally and never sent over the internet.\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import * as React from \"react\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport TwoFactorTokenGenerator from \"../TwoFactorTokenGenerator\";\nimport Footer from \"../Footer\";\nimport Banner from \"../Banner\";\n\nexport default function Main() {\n  const theme = createTheme({\n    palette: {\n      primary: {\n        main: \"#009688\",\n      },\n      secondary: {\n        main: \"#aed581\",\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Banner />\n      <Card variant=\"outlined\">\n        <TwoFactorTokenGenerator />\n      </Card>\n      <Footer />\n    </ThemeProvider>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"secret\":\"TwoFactorTokenGenerator_secret__3C9Dj\",\"result\":\"TwoFactorTokenGenerator_result__4uLKE\",\"twoFactorContainer\":\"TwoFactorTokenGenerator_twoFactorContainer__3lZLa\",\"refreshButton\":\"TwoFactorTokenGenerator_refreshButton__18RjQ\",\"token\":\"TwoFactorTokenGenerator_token__3RZFe\"};"],"sourceRoot":""}